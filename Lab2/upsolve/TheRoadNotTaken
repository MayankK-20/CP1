/**
 *    author:  MK_20
 *    created: 23-06-2024 18:30:24
 **/

#include<iostream>
#include<vector>
using namespace std;

void dfs(int node, int depth, vector<vector<int>>& v, vector<bool>& visited, int& maxDepth, int& lastnode) {
    visited[node]=true;
    if (depth>maxDepth) {
        maxDepth=depth;
        lastnode=node;
    }
    for (int i=0; i<v[node].size(); i++){
        if (!visited[v[node][i]]){
            dfs(v[node][i], depth+1, v, visited, maxDepth, lastnode);
        }
    }
}

int main(){

    int n;
    cin>>n;
    vector<vector<int>> v(n);
    vector<int> cnt(n, 0);
    for (int i=1; i<n; i++){
        int c1, c2;
        cin>>c1>>c2;
        v[c1-1].push_back(c2-1);
        v[c2-1].push_back(c1-1);
        cnt[c1-1]++;
        cnt[c2-1]++;
    }
    if (n<3){
        cout<<n-1<<endl;
        return 0;
    }
    int maxdepth=-1;
    int lastnode;
    for (int i=0; i<n; i++){
        vector<bool> visited(n, false);
        if (cnt[i]==1){
            dfs(i, 1, v, visited, maxdepth, lastnode);
            break;
        }
    }
    vector<bool> visited(n, false);
    dfs(lastnode, 1, v, visited, maxdepth, lastnode);
    cout<<(n-maxdepth)*2+maxdepth-1<<endl;

    return 0;
}
